<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>kcc web client</title>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.css">
<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>

</head>
<body>

  <div id="connectionStatus" class="connection-indicator">
    <div class="computers">
      <span class="computer-icon">ðŸ’»</span>
      <div class="connection-line"></div>
      <span class="computer-icon">ðŸ’»</span>
    </div>
    <p class="status-text"></p>
  </div>

  <div class="container">
    
   
    <%- body %>
  


  <div class="navigation-bar">
    
    <div class="nav-button" onclick="goBack()" title="Go Back">
      &#9664; 
    </div>

    
    <div class="nav-button center" onclick="goHome()" title="Home">
      &#8962;
    </div>

    <div class="nav-button" onclick="goForward()" title="Go Forward">
      &#9654; 
    </div>
  </div>

</div>

  <script>
    function goBack() {
      window.history.back();
    }
    function goHome() {
      window.location.href = '/';
    }
    function goForward() {
      window.history.forward();
    }
  </script>


<script>
  document.addEventListener("DOMContentLoaded", function () {
    const connectionIndicator = document.getElementById("connectionStatus");
    const connectionLine = connectionIndicator.querySelector(".connection-line");
    const statusText = connectionIndicator.querySelector(".status-text");

    let isConnected = false;

    // Function to update connection status indicator
    async function updateConnectionStatus() {
      try {
        const response = await fetch('/connectionStatus');
        const data = await response.json();
        isConnected = data.isConnected;

        if (isConnected) {
          connectionLine.style.backgroundColor = "green";
          statusText.textContent = "Connected";
        } else {
          connectionLine.style.backgroundColor = "red";
          statusText.textContent = "Disconnected";
        }
        
        // Attempt to update the dynamically loaded Issue KCC link status
        toggleIssueKccLink();
      } catch (error) {
        console.error("Error fetching connection status:", error);
        connectionLine.style.backgroundColor = "red";
        statusText.textContent = "Error";
      }
    }

    // Function to toggle Issue Kcc link based on connection status
    function toggleIssueKccLink() {
      const issueKccLink = document.getElementById("issueKccLink");
      if (issueKccLink) {
        if (isConnected) {
          issueKccLink.classList.remove("disabled");
        } else {
          issueKccLink.classList.add("disabled");
        }
      }
    }

 
    setInterval(updateConnectionStatus, 5000);
    updateConnectionStatus();

    // Observe container for dynamically added content (Issue KCC link)
    const container = document.querySelector(".container");
    const observer = new MutationObserver(toggleIssueKccLink);
    observer.observe(container, { childList: true, subtree: true });
  });
</script>

</body>
</html>
